#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
A setuptools-based setup module.

See:
   https://packaging.python.org/en/latest/distributing.html
   https://github.com/pypa/sampleproject

Docs on the setup function kwargs:
   https://packaging.python.org/distributing/#setup-args

"""

from __future__ import absolute_import, print_function

import glob
import os.path
from setuptools import setup, find_packages
import codecs # Use a consistent encoding.

# Note that any .so files in the source directory also need to be deleted in
# order to switch back to ordinary Python from Cython.  During development
# delete the .c files before regenerating them.

USE_CYTHON = False # Use Cython or at least the .c files already generated by Cython.
REGENERATE_C_CODE = True # Either regenerate C code with Cython or compile existing code.
COMPILER_IS_GCC = True # Only meaningful when regenerating code.
EXTRA_GCC_COMPILE_ARGS = ["-O3"] # Optimize code more than the default.

#
# Handle optional Cython.
#

cmdclass = {}
EXTRA_COMPILE_ARGS = []
ext_modules = None

if COMPILER_IS_GCC:
    EXTRA_COMPILE_ARGS = EXTRA_GCC_COMPILE_ARGS

if USE_CYTHON:
    PYX = ".pyx" # Standard Cython modules.
    PY = ".py"   # Used for pure Python mode Cython.
    if REGENERATE_C_CODE:
        try:
            from Cython.Build import cythonize
            from Cython.Distutils import build_ext
        except:
            raise ImportError("Cannot import Cython.  It is a dependency for the"
                              " selected option to regenerate Cython C code.")
        # Note that calling cythonize with globbed strings, like
        #    ext_modules = cythonize(["./src/typped/*.py", "./src/typped/matcher.pyx",])
        # does not work for pure Python mode.  You need to define the Extensions.
    else:
        PYX = PY = ".c" # Compile existing C code.

    from setuptools.extension import Extension
    extensions = [
          Extension("typped.matcher",
                   ["./src/typped/matcher" + PY],
                   extra_compile_args=EXTRA_COMPILE_ARGS,
                   #include_dirs=[numpy.get_include()]
                   ),
          Extension("typped.lexer",
                   ["./src/typped/lexer" + PY],
                   extra_compile_args=EXTRA_COMPILE_ARGS,
                   ),
          #Extension("typped.token_buffer",  # Now the one in Lexer is used instead.
          #         ["./src/typped/token_buffer" + PYX],
          #         ),
    ]

    if REGENERATE_C_CODE:
        cmdclass.update({'build_ext': build_ext})
        ext_modules = cythonize(extensions, compiler_directives={"infer_types": True})
    else:
        ext_modules = extensions

#
# Regular setup.py below.
#

# Get the long description from the README.rst file.
current_dir = os.path.abspath(os.path.dirname(__file__))
with codecs.open(os.path.join(current_dir, "README.rst"), encoding="utf-8") as f:
    long_description = f.read()

setup(
    name="typped",
    version="0.1.0", # Versions should comply with PEP440.
    #description="A typped Pratt parser which employs dispatching of handler functions.",
    description="A parser.", # TODO switch
    #url="https://github.com/pypa/sampleproject",
    keywords=["parser", "Pratt", "grammar", "language", "syntax", "syntax tree",
              "BNF", "EBNF", "typped"],
    install_requires=["pytest-helper", "pytest>=2.0"],

    license="MIT",
    classifiers=[
        # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
        # Development Status: Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        "Development Status :: 3 - Alpha",
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Operating System :: Unix',
        'Operating System :: POSIX',
        'Operating System :: Microsoft :: Windows',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        # uncomment if you test on these interpreters:
        # 'Programming Language :: Python :: Implementation :: IronPython',
        # 'Programming Language :: Python :: Implementation :: Jython',
        # 'Programming Language :: Python :: Implementation :: Stackless',
        'Topic :: Utilities',
    ],

    # Settings usually the same.
    author="Allen Barker",
    author_email="Allen.L.Barker@gmail.com",
    include_package_data=True,
    zip_safe=False,

    ext_modules=ext_modules,
    cmdclass=cmdclass,

    # Automated stuff below.
    long_description=long_description,
    packages=find_packages('src'),
    package_dir={'': 'src'},
    py_modules=[os.path.splitext(os.path.basename(path))[0]
                                    for path in glob.glob('src/*.py')],
)

